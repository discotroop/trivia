{"version":3,"sources":["components/helpers/decodeHtml.js","components/helpers/shuffleArray.js","components/questions/Answers.js","components/questions/Cards.js","components/menu/CategorySelector.js","components/menu/DifficultySelector.js","components/menu/Menu.js","components/endgame/Answers.js","components/endgame/EndGame.js","components/helpers/GenerateKey.js","components/Game.js","serviceWorker.js","index.js"],"names":["decodeHtml","html","txt","document","createElement","innerHTML","value","shuffleArray","array","i","length","j","Math","floor","random","Answers","question","answers","correctAnswer","checkAnswer","type","className","map","answer","onClick","e","target","textContent","key","Cards","questions","count","c","console","log","push","incorrect_answers","correct_answer","categoryholder","name","Categories","handleChange","DropdownButton","id","title","onSelect","category","Dropdown","Item","eventKey","Difficulty","Menu","props","state","difficulty","categoryName","handleDifficultyChange","bind","handleSubmit","handleCategoryChange","handleCountChange","this","setState","trimNumber","trimLetters","submit","preventDefault","string","match","join","onSubmit","min","max","onChange","React","Component","trim","EndGame","score","repeat","reset","generateKey","baseString","toLowerCase","Game","views","iterator","selector","fetchNewData","dynamicView","view","bumpIterator","fetch","then","res","json","data","results","forEach","playerAnswer","catch","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5ff02f83.chunk.js","sourcesContent":["function decodeHtml(html) {\n  var txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n}\n\nexport default decodeHtml;\n","function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport default shuffleArray;\n","import React from \"react\";\nimport decodeHtml from \"../helpers/decodeHtml\";\nimport shuffleArray from \"../helpers/shuffleArray\";\n\nconst Answers = ({ question, answers, correctAnswer, checkAnswer, type }) => {\n  // randomize the order of multiple choice questions\n  if (type === \"multiple\") {\n    answers = shuffleArray(answers);\n  }\n  return (\n    <div className=\"answers\">\n      {answers.map(answer => (\n        <button\n          className=\"btn btn-secondary\"\n          onClick={e =>\n            checkAnswer(e.target.textContent, correctAnswer, question)\n          }\n          key={decodeHtml(answer)}\n        >\n          {decodeHtml(answer)}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Answers;\n","import React from \"react\";\nimport Answers from \"./Answers.js\";\nimport decodeHtml from \"../helpers/decodeHtml\";\n\nconst Cards = ({ questions, checkAnswer, count }) => {\n  // placeholder, to handle error wherein rendering fails while waiting for questions to be passed\n  // there is like a better work around\n  let c = [\n    {\n      question: \"test\",\n      answers: [\"test\"],\n      correctAnswer: \"right\",\n      checkAnswer: function () {\n        console.log(\"sample\");\n      }\n    }\n  ];\n\n  questions.map(question =>\n    c.push({\n      question: question.question,\n      answers: question.incorrect_answers,\n      correctAnswer: question.correct_answer,\n      checkAnswer: checkAnswer,\n      type: question.type\n    })\n  );\n\n  return (\n    <div>\n      <div className=\"card-holder\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <center className=\"text-info\">\n              <h1>Question:</h1>\n            </center>\n            <h5 className=\"card-question\">{decodeHtml(c[count].question)}</h5>\n            <Answers\n              question={c[count].question}\n              answers={c[count].answers}\n              correctAnswer={c[count].correctAnswer}\n              checkAnswer={c[count].checkAnswer}\n              type={c[count].type}\n              count={count}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\n\nlet categoryholder = [\n  {\n    name: \"General Knowledge\",\n    value: 9\n  },\n  {\n    name: \"Books\",\n    value: 10\n  },\n  {\n    name: \"Film\",\n    value: 11\n  },\n  { name: \"Music\", value: 12 },\n  {\n    name: \"Musicals and Theatre\",\n    value: 13\n  },\n  {\n    name: \"Television\",\n    value: 14\n  },\n  {\n    name: \"Video Games\",\n    value: 15\n  },\n  {\n    name: \"Board Games\",\n    value: 16\n  },\n  {\n    name: \"Science and Nature\",\n    value: 17\n  },\n  {\n    name: \"Computers\",\n    value: 18\n  },\n  {\n    name: \"Mathematics\",\n    value: 19\n  },\n  {\n    name: \"Mythology\",\n    value: 20\n  },\n  {\n    name: \"Sports\",\n    value: 21\n  },\n  {\n    name: \"Geography\",\n    value: 22\n  },\n  {\n    name: \"History\",\n    value: 23\n  },\n  {\n    name: \"Politics\",\n    value: 24\n  },\n  {\n    name: \"Art\",\n    value: 25\n  },\n  {\n    name: \"Celebrities\",\n    value: 26\n  },\n  {\n    name: \"Animals\",\n    value: 27\n  },\n  {\n    name: \"Vehicles\",\n    value: 28\n  },\n  {\n    name: \"Comics\",\n    value: 29\n  },\n  {\n    name: \"Science-Gadgets\",\n    value: 30\n  }\n];\n\nconst Categories = ({ value, handleChange }) => {\n  return (\n    <DropdownButton\n      id=\"category-selector\"\n      title={value}\n      onSelect={handleChange}\n    >\n      {categoryholder.map(category => (\n        <Dropdown.Item\n          eventKey={category.name + category.value}\n          key={category.value}\n        >\n          {category.name}\n        </Dropdown.Item>\n      ))}\n    </DropdownButton>\n  );\n};\n\nexport default Categories;\n","import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\n\nconst Difficulty = ({ value, handleChange }) => {\n  return (\n    <DropdownButton\n      id=\"difficulty-selector\"\n      title={value}\n      onSelect={handleChange}\n    >\n      <Dropdown.Item eventKey=\"Easy\">Easy</Dropdown.Item>\n      <Dropdown.Item eventKey=\"Medium\">Medium</Dropdown.Item>\n      <Dropdown.Item eventKey=\"Hard\">Hard</Dropdown.Item>\n    </DropdownButton>\n  );\n};\n\nexport default Difficulty;\n","import React from \"react\";\nimport Categories from \"./CategorySelector\";\nimport Difficulty from \"./DifficultySelector\";\n\nclass Menu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 10,\n      category: 0,\n      difficulty: \"Difficulty\",\n      categoryName: \"Category\"\n    };\n    this.handleDifficultyChange = this.handleDifficultyChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleCountChange = this.handleCountChange.bind(this);\n  }\n  handleCountChange(e) {\n    this.setState({ count: e.target.value });\n  }\n  handleCategoryChange(e) {\n    this.setState({\n      category: this.trimNumber(e),\n      categoryName: this.trimLetters(e)\n    });\n  }\n  handleDifficultyChange(e) {\n    this.setState({ difficulty: e });\n  }\n\n  handleSubmit(e) {\n    if (this.state.difficulty === \"Difficulty\") {\n      this.props.submit(\n        \"Questions\",\n        this.state.count,\n        this.state.category,\n        \"easy\"\n      );\n    } else {\n      this.props.submit(\n        \"Questions\",\n        this.state.count,\n        this.state.category,\n        this.state.difficulty\n      );\n    }\n    e.preventDefault();\n  }\n  trimNumber(string) {\n    let numberPattern = /\\d+/g;\n    let result = string.match(numberPattern).join([]);\n    return result;\n  }\n  trimLetters(string) {\n    let stringPattern = /[a-zA-Z\\s]/g;\n    let result = string.match(stringPattern).join([]);\n    return result;\n  }\n  render() {\n    return (\n      <div className=\"menu-container bg-light\">\n        <div className=\"menu-header\">\n          <h1 className=\"text-primary\"> Tiny Trivia </h1>\n          <p className=\"text-secondary\">\n            {\" \"}\n            Make custom selections or just hit start to jump in!{\" \"}\n          </p>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <label className=\"text-secondary\">\n            Count:\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"50\"\n              value={this.state.count}\n              onChange={this.handleCountChange}\n            ></input>\n          </label>\n          <Categories\n            value={this.state.categoryName}\n            handleChange={this.handleCategoryChange}\n          />\n          <Difficulty\n            value={this.state.difficulty}\n            handleChange={this.handleDifficultyChange}\n          />\n          <input\n            className=\"btn btn-primary submit\"\n            type=\"submit\"\n            value=\"Start\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","import React from \"react\";\nimport decodeHtml from \"../helpers/decodeHtml\";\n\nconst Answers = ({ answers }) => {\n  return (\n    <div>\n      {answers.map(answer => {\n        if (answer.answer.trim() === answer.correctAnswer.trim()) {\n          return (\n            <div className=\"review-card\">\n              <p> {decodeHtml(answer.question)} </p>\n              <p className=\"text-success\"> {decodeHtml(answer.answer)} </p>\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"review-card\">\n              <p> {decodeHtml(answer.question)} </p>\n              <p>\n                {\" \"}\n                Your Answer:{\" \"}\n                <span className=\"text-danger\">\n                  {\" \"}\n                  {decodeHtml(answer.answer)}{\" \"}\n                </span>{\" \"}\n              </p>\n              <p>\n                Correct Answer:{\" \"}\n                <span className=\"text-info\">\n                  {\" \"}\n                  {decodeHtml(answer.correctAnswer)}{\" \"}\n                </span>{\" \"}\n              </p>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default Answers;\n","import React from \"react\";\nimport Answers from \"./Answers\";\n\nconst EndGame = props => {\n  return (\n    <div className=\"endGame\">\n      <div className=\"end-game-info\">\n        <h1 className=\"text-primary\"> Game Over! </h1>\n        <h3 className=\"text-secondary\">\n          {\" \"}\n          Your Score: {props.state.score} / {props.state.questions.length}{\" \"}\n        </h3>\n      </div>\n      <div className=\"end-buttons\">\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            props.submit(\n              \"Questions\",\n              props.state.repeat.count,\n              props.state.repeat.category,\n              props.state.repeat.difficulty\n            );\n            props.reset();\n          }}\n        >\n          {\" \"}\n          Play Again!{\" \"}\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            props.submit(\"Menu\");\n            props.reset();\n          }}\n        >\n          {\" \"}\n          Main Menu{\" \"}\n        </button>\n      </div>\n      <div className=\"question-review\">\n        <Answers answers={props.state.answers} />\n      </div>\n      <div className=\"end-buttons\">\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            props.submit(\n              \"Questions\",\n              props.state.repeat.count,\n              props.state.repeat.category,\n              props.state.repeat.difficulty\n            );\n            props.reset();\n          }}\n        >\n          {\" \"}\n          Play Again!{\" \"}\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            props.submit(\"Menu\");\n            props.reset();\n          }}\n        >\n          {\" \"}\n          Main Menu{\" \"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EndGame;\n","function generateKey(count, category, difficulty) {\n  // set default call\n  let baseString = \"https://opentdb.com/api.php?\";\n\n  if (count) {\n    baseString = baseString + \"amount=\" + count;\n  } else {\n    console.log(\"default count\");\n  }\n\n  if (category) {\n    category = category + \"\";\n    baseString = baseString + \"&category=\" + category;\n  } else {\n    console.log(\"default categories\");\n  }\n\n  if (difficulty) {\n    baseString = baseString + \"&difficulty=\" + difficulty.toLowerCase();\n  } else {\n    console.log(\"default difficulty\");\n  }\n  console.log(\"string call: \", baseString);\n  return baseString;\n}\n\nexport default generateKey;\n","import React from \"react\";\nimport \"./Game.css\";\nimport Cards from \"./questions/Cards.js\";\nimport Menu from \"./menu/Menu.js\";\nimport EndGame from \"./endgame/EndGame.js\";\nimport generateKey from \"./helpers/GenerateKey.js\";\n\n// add pause between items loading\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.bumpIterator = this.bumpIterator.bind(this);\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"game-container\">\n          <div className=\"bg-light card-container\">\n            {this.dynamicView(this.state.views)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // set initial state / default values\n  state = {\n    views: \"Menu\",\n    questions: [],\n    answers: [],\n    iterator: 0,\n    score: 0,\n    repeat: {\n      category: 10,\n      count: 10,\n      difficulty: \"easy\"\n    }\n  };\n\n  // handle start button and play again button requests\n  submit = (selector, count, category, difficulty) => {\n    this.fetchNewData(count, category, difficulty);\n    this.setState({\n      views: selector,\n      repeat: {\n        count: count,\n        category: category,\n        difficulty: difficulty\n      }\n    });\n  };\n\n  // handle switching between main menu, questions view and end game menu\n  dynamicView = selector => {\n    switch (selector) {\n      case \"Menu\":\n        return <Menu submit={this.submit} view={this.state.views} />;\n      case \"Questions\":\n        return (\n          <Cards\n            questions={this.state.questions}\n            count={this.state.iterator}\n            checkAnswer={this.checkAnswer}\n          />\n        );\n      case \"EndGame\":\n        return (\n          <EndGame\n            submit={this.submit}\n            view={this.state.views}\n            reset={this.reset}\n            repeat={this.state.repeat}\n            state={this.state}\n          />\n        );\n      default:\n        return <div> default </div>;\n    }\n  };\n  // reset state to avoid error when playing again\n  reset = () => {\n    this.setState({\n      iterator: 1,\n      score: 0,\n      answers: []\n    });\n  };\n  bumpIterator() {\n    this.setState({\n      iterator: this.state.iterator + 1\n    });\n  }\n\n  // check for correct answers and handle ending game on last question\n  checkAnswer(answer, correctAnswer, question) {\n    if (this.state.iterator === this.state.questions.length) {\n      if (answer.trim() === correctAnswer.trim()) {\n        this.setState({\n          score: this.state.score + 1,\n          iterator: 1\n        });\n      }\n      this.setState({\n        views: \"EndGame\"\n      });\n    } else {\n      if (answer.trim() === correctAnswer.trim()) {\n        this.setState({\n          score: this.state.score + 1\n        });\n        this.bumpIterator();\n      } else {\n        this.bumpIterator();\n      }\n    }\n    // push questions, answers and correct answers into state.answers for\n    // easy access for review at end of game\n    let c = this.state.answers;\n    c.push({\n      question: question,\n      answer: answer,\n      correctAnswer: correctAnswer\n    });\n    this.setState({\n      answers: c\n    });\n  }\n\n  // generate custom api key, call for data and populate game.state with questions\n  fetchNewData(count, category, difficulty) {\n    let key = generateKey(count, category, difficulty);\n    fetch(key)\n      .then(res => res.json())\n      .then(data => {\n        data.results.forEach(function (question) {\n          if (question.type === \"boolean\") {\n            question.incorrect_answers = [\"True\", \"False\"];\n          } else {\n            question.incorrect_answers.push(question.correct_answer);\n          }\n          question.playerAnswer = \"\";\n        });\n        this.setState({\n          questions: data.results,\n          length: data.results.length,\n          iterator: 1\n        });\n      })\n      .catch(console.log);\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// https://opentdb.com/api_config.php\n// set up menu\n// append relevant codes to strings\n// call component that takes relavent string and returns array of questions via fetch\n// write tests\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n// To Do\n// add button component\n// passdown functionality to check questions to buttons\n"],"sourceRoot":""}